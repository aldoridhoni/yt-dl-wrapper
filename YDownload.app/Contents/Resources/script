#!/usr/bin/env python

import re
import os
import subprocess
from urlparse import urlparse

CD_PATH = "cocoaDialog.app/Contents/MacOS/CocoaDialog"
SCRIPT_PATH = "./youtube-dl"
OUTPUT_FOLDER = "~/Music/"
OUTPUT = OUTPUT_FOLDER + "%(uploader)s/%(title)s-%(id)s.%(ext)s"
# YT_MUSIC = "--newline -x --audio-format mp3 -f 140 -o" # require ffmpeg installed
YT_MUSIC = "--newline -f 140 -o"
YT_VIDEO = "-t -o"


regex = re.compile(
        r'^(?:http)s?://'
        # r'(?:youtube?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)'
        r'(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)' #domain...
        r'(?:/?|[/?]\S+)$', re.IGNORECASE)

def dialog():
    args = [CD_PATH, "inputbox", "--title", "Download Youtube Video", \
            "--informative-text", "Enter youtube URL", "--text", "Youtube Video URL", \
            "--button1", "Download", "--string-output", "--no-newline"]
    popen = subprocess.Popen(args, stdout=subprocess.PIPE)
    output = popen.communicate()[0].split('\n')
    if output[0] == "Download":
        if re.match(regex, output[1]):
            return output[1]
        else:
            return False

class ProgressBar:
    """Simple class for displaying progress bars using CocoaDialog"""

    def __init__(self, title="Progress", message="", percent=0):
        """Create progress bar dialog"""
        template = "%s progressbar --title '%s' --text '%s' --percent %d"
        self.percent = percent
        self.pipe = os.popen(template % (CD_PATH, title, message, percent), "w")
        self.message = message

    def update(self, percent, message=False):
        """Update progress bar (and message if desired)"""
        if message:
            self.message = message  # store message for persistence
        self.pipe.write("%d %s\n" % (percent, self.message))
        self.pipe.flush()

    def finish(self):
        """Close progress bar window"""
        self.pipe.close()

if __name__ == "__main__":
    # bar = ProgressBar(title="Download Progress")
    url = dialog()
    if url:
        subprocess.call([SCRIPT_PATH, '--update'])
        subprocess.call([SCRIPT_PATH] + YT_MUSIC.split() + [OUTPUT, url])
    else:
        print("Salah memasukan url")

## TODO
## capture youtube-dl output buffer and if running download, find progress.
